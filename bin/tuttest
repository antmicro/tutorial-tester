#!/usr/bin/env python3

from tuttest import get_snippets
import fire

def tuttest(filename: str, commands: str = None, single_command: bool = None, prefix_lines_with: str = None):
    '''
    Tuttest is a utility package that simplifies tutorial and example testing. It provides an interface for extracting code snippets embedded in RST and Markdown files.

    Args:
        filename : filename with tutorial
        commands : optional names to give to the extracted snippets,
                   provided as list
        single_command : executes all snippets in a single command
        prefix_lines_with : string to prefix each command with
    '''
    snippets = get_snippets(filename)

    code = []
    if not commands:
        for s in snippets:
            code.append(snippets[s].text.strip())
    else:
        commands = commands.split(',')

        for c in commands:
            if c in snippets:
                # name matches, add snippet code
                code.append(snippets[c].text.strip())
            else:
                if c[0] == "+":
                    # no match, + sign, add ad hoc code to previous line; don't strip!
                    code[len(code)-1] += c[1:]
                elif c[0] == "#":
                    # select snippet by number
                    code.append(list(snippets.values())[int(c[1:])].text.strip())
                else:
                    # no match, exit with error code
                    exit(1)

    if single_command:
        code = [';'.join(code)]

    if prefix_lines_with:
        prefixed_code = []
        for snippet in code:
            prefixed_snippet = prefix_lines_with + " \'"
            for line in snippet.splitlines():
                if len(line.strip()): # skip empty lines
                    prefixed_snippet += line + ";"
            prefixed_snippet += "\'"
            prefixed_code.append(prefixed_snippet)
        code = prefixed_code
    print('\n\n'.join(code))

if __name__ == "__main__":
    fire.Fire(tuttest)

